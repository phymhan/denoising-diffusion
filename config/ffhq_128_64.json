dataset: {
    name: ffhq
    path: data/ffhq_lmdb
    resolution: 128
}

model: {
    __target: model.UNet
    in_channel: 3
    channel: 64
    channel_multiplier: [1, 1, 2, 2, 4, 4]
    n_res_blocks: 2
    attn_strides: [16]
    attn_heads: 1
    use_affine_time: false
    dropout: 0.0
    fold: 1
}

diffusion: {
    beta_schedule: {
        __target: diffusion.make_beta_schedule
        schedule: linear
        n_timestep: 1000
        linear_start: 1e-4
        linear_end: 2e-2
    }
}

training: {
    n_iter = 2400000
    optimizer: {
        type: adam
        lr: 2e-5
    }
    scheduler: {
        type: cycle
        lr: 2e-5
        n_iter: 2400000
        warmup: 5000
        decay: [linear, flat]
    }
    dataloader: {
        batch_size: 8
        num_workers: 2
        drop_last: true
    }
}

evaluate: {
    wandb: false
    log_every: 10
    save_every: 10000
    valid_every: 10000
}

logging: {
    wandb: true
    name: ffhq_unet64
    wandb_project: ddpm
    wandb_entity: ligongh
    log_root: logs
    log_every: 10
    save_every: 10000
}